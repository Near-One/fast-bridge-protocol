use eth_types::LogEntry;
use ethabi::{Event, EventParam, Hash, ParamType, RawLog};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::near_bindgen;
use serde::{Deserialize, Serialize};
use spectre_bridge_common::*;

type EthEventParams = Vec<(String, ParamType, bool)>;

const EVENT_NAME: &str = "TransferTokens";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Default)]
pub struct TransferProof {
    pub eth_bridge_contract: EthAddress,
    pub nonce: u128,
    pub relayer: EthAddress,
    pub token: EthAddress,
    pub recipient: EthAddress,
    pub amount: u128,
}

impl TransferProof {
    pub fn event_params() -> EthEventParams {
        vec![
            ("nonce".to_string(), ParamType::Uint(256), false),
            ("relayer".to_string(), ParamType::Address, false),
            ("token".to_string(), ParamType::Address, false),
            ("recipient".to_string(), ParamType::Address, false),
            ("amount".to_string(), ParamType::Uint(256), false),
        ]
    }

    pub fn parse(proof: Proof) -> Self {
        let data = proof.log_entry_data;
        let params = TransferProof::event_params();
        let event = Event {
            name: EVENT_NAME.to_string(),
            inputs: params
                .into_iter()
                .map(|(name, kind, indexed)| EventParam {
                    name,
                    kind,
                    indexed,
                })
                .collect(),
            anonymous: false,
        };

        let log_entry: LogEntry = rlp::decode(&data).expect("Invalid RLP");
        let locker_address = (log_entry.address.0).0;
        let topics = log_entry
            .topics
            .iter()
            .map(|h| Hash::from(&((h.0).0)))
            .collect();
        let raw_log = RawLog {
            topics,
            data: log_entry.data,
        };
        let log = event.parse_log(raw_log).expect("Failed to parse event log");
        let nonce = log.params[0].value.clone().to_uint().unwrap().as_u128();

        let relayer = log.params[1].value.clone().to_address().unwrap().0;
        let token = log.params[2].value.clone().to_address().unwrap().0;
        let recipient = log.params[3].value.clone().to_address().unwrap().0;
        let amount = log.params[4].value.clone().to_uint().unwrap().as_u128();

        Self {
            eth_bridge_contract: locker_address,
            nonce,
            relayer,
            token,
            recipient,
            amount,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::utils;

    fn create_proof() -> Proof {
        Proof {
            log_index: 2,
            log_entry_data: vec![
                248, 217, 148, 188, 104, 92, 0, 56, 132, 195, 148, 235, 181, 249, 35, 90, 29, 190,
                156, 189, 198, 201, 214, 225, 160, 75, 168, 15, 71, 73, 166, 186, 255, 95, 219, 86,
                204, 248, 139, 224, 35, 161, 66, 98, 44, 226, 232, 89, 24, 130, 92, 112, 90, 69,
                248, 126, 197, 184, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
                35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6,
                51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245,
                220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251, 178, 36, 47,
                150, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 161,
            ],
            receipt_index: 25,
            receipt_data: vec![
                249, 3, 32, 1, 131, 34, 131, 255, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 128, 32, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 2, 21,
                248, 155, 148, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251,
                178, 36, 47, 150, 147, 248, 99, 160, 140, 91, 225, 229, 235, 236, 125, 91, 209, 79,
                113, 66, 125, 30, 132, 243, 221, 3, 20, 192, 247, 178, 41, 30, 91, 32, 10, 200,
                199, 195, 185, 37, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58,
                254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 160, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 188, 104, 92, 0, 56, 132, 195, 148, 235, 181, 249, 35, 90,
                29, 190, 156, 189, 198, 201, 214, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 245, 223, 32, 248, 155, 148, 178, 215,
                92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251, 178, 36, 47, 150, 147,
                248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55,
                141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239,
                160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245,
                220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193,
                69, 6, 51, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 248, 217, 148, 188, 104, 92, 0, 56, 132, 195, 148,
                235, 181, 249, 35, 90, 29, 190, 156, 189, 198, 201, 214, 225, 160, 75, 168, 15, 71,
                73, 166, 186, 255, 95, 219, 86, 204, 248, 139, 224, 35, 161, 66, 98, 44, 226, 232,
                89, 24, 130, 92, 112, 90, 69, 248, 126, 197, 184, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0,
                126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250,
                58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24,
                199, 251, 178, 36, 47, 150, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
            ],
            header_data: vec![
                249, 2, 94, 160, 253, 126, 198, 97, 96, 108, 14, 108, 13, 233, 235, 64, 222, 79,
                152, 117, 102, 20, 4, 61, 222, 207, 194, 75, 19, 13, 51, 92, 245, 229, 235, 140,
                160, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26,
                211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 148, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 200, 113, 202, 147, 117,
                162, 155, 166, 225, 117, 186, 48, 26, 248, 30, 219, 215, 2, 98, 114, 70, 33, 247,
                161, 218, 72, 144, 242, 95, 142, 197, 130, 160, 232, 12, 148, 187, 121, 54, 121,
                130, 118, 199, 199, 118, 84, 77, 54, 165, 63, 253, 66, 52, 130, 33, 251, 236, 213,
                32, 139, 188, 206, 162, 86, 127, 160, 56, 15, 163, 96, 87, 5, 32, 167, 68, 185, 81,
                62, 225, 10, 233, 86, 93, 96, 188, 179, 120, 6, 145, 123, 58, 147, 199, 246, 54,
                136, 114, 30, 185, 1, 0, 4, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 4, 0, 128, 0, 10, 8, 0,
                16, 0, 64, 0, 32, 0, 64, 2, 0, 0, 128, 0, 0, 32, 0, 8, 0, 130, 36, 4, 0, 2, 2, 0,
                0, 0, 88, 0, 2, 0, 19, 0, 0, 0, 24, 8, 64, 128, 0, 32, 2, 128, 128, 32, 1, 0, 1, 1,
                64, 128, 4, 0, 2, 0, 2, 0, 0, 10, 0, 0, 192, 0, 193, 0, 0, 0, 2, 0, 136, 64, 12,
                16, 0, 8, 0, 128, 0, 0, 0, 8, 0, 0, 2, 0, 68, 0, 64, 8, 32, 0, 0, 0, 10, 0, 64, 0,
                0, 16, 129, 24, 0, 1, 16, 2, 32, 144, 128, 0, 8, 128, 0, 32, 36, 17, 0, 129, 16, 0,
                32, 2, 74, 64, 8, 48, 4, 0, 8, 8, 0, 0, 0, 0, 144, 0, 16, 9, 32, 132, 8, 0, 36, 2,
                162, 0, 48, 0, 0, 8, 0, 128, 0, 4, 64, 0, 0, 64, 0, 0, 32, 16, 0, 0, 0, 0, 16, 1,
                0, 0, 0, 0, 5, 0, 0, 0, 8, 0, 68, 6, 0, 8, 9, 72, 4, 0, 0, 0, 0, 0, 0, 4, 9, 0, 0,
                0, 0, 128, 2, 128, 32, 1, 40, 0, 0, 129, 32, 2, 0, 16, 0, 1, 0, 16, 16, 0, 0, 0,
                24, 0, 0, 0, 24, 0, 32, 0, 2, 64, 8, 32, 0, 0, 0, 0, 0, 1, 128, 0, 18, 2, 1, 131,
                106, 199, 79, 132, 1, 201, 195, 100, 131, 34, 131, 255, 132, 98, 153, 238, 212,
                184, 97, 0, 0, 0, 0, 0, 0, 67, 111, 110, 115, 101, 110, 83, 121, 115, 32, 72, 121,
                112, 101, 114, 108, 101, 100, 103, 101, 114, 32, 66, 101, 115, 117, 157, 28, 49, 4,
                27, 25, 251, 250, 65, 138, 46, 136, 141, 254, 174, 95, 129, 146, 196, 54, 142, 232,
                151, 131, 82, 181, 68, 60, 22, 91, 189, 45, 105, 136, 243, 91, 47, 125, 198, 227,
                113, 18, 68, 18, 185, 117, 120, 218, 41, 162, 229, 105, 37, 32, 166, 135, 56, 19,
                187, 114, 77, 57, 209, 176, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 8,
            ],
            proof: vec![
                vec![
                    248, 113, 160, 27, 121, 251, 135, 136, 79, 231, 106, 167, 235, 157, 201, 251,
                    212, 119, 105, 226, 14, 212, 165, 226, 58, 76, 210, 237, 120, 58, 67, 16, 245,
                    202, 78, 160, 88, 180, 253, 71, 61, 171, 60, 134, 31, 206, 10, 30, 187, 149,
                    230, 168, 164, 193, 191, 241, 152, 174, 124, 219, 60, 123, 173, 49, 241, 143,
                    59, 68, 128, 128, 128, 128, 128, 128, 160, 235, 191, 192, 49, 110, 73, 7, 3,
                    215, 213, 187, 156, 179, 152, 226, 156, 99, 51, 78, 1, 25, 245, 80, 103, 1, 76,
                    120, 13, 148, 26, 25, 129, 128, 128, 128, 128, 128, 128, 128, 128,
                ],
                vec![
                    249, 1, 81, 160, 63, 57, 166, 125, 105, 45, 16, 40, 176, 129, 197, 250, 127,
                    102, 138, 69, 71, 180, 206, 27, 56, 109, 149, 88, 112, 93, 239, 72, 125, 236,
                    67, 94, 160, 167, 175, 66, 173, 66, 121, 223, 201, 248, 162, 213, 95, 173, 126,
                    138, 236, 114, 203, 173, 159, 70, 100, 228, 4, 23, 118, 81, 153, 48, 141, 207,
                    211, 160, 188, 178, 55, 205, 111, 188, 72, 50, 223, 209, 16, 13, 18, 36, 244,
                    116, 105, 118, 148, 165, 133, 155, 251, 27, 21, 3, 134, 52, 171, 212, 143, 199,
                    160, 173, 226, 246, 164, 244, 244, 228, 238, 171, 198, 182, 161, 205, 228, 8,
                    20, 213, 76, 221, 106, 72, 116, 55, 163, 247, 77, 74, 150, 93, 245, 173, 193,
                    160, 71, 200, 148, 113, 168, 229, 103, 188, 193, 103, 18, 75, 9, 214, 158, 244,
                    216, 182, 56, 221, 207, 218, 173, 151, 164, 1, 126, 94, 74, 167, 156, 83, 160,
                    33, 150, 84, 91, 88, 92, 111, 168, 180, 126, 192, 211, 191, 55, 173, 51, 174,
                    196, 220, 214, 240, 27, 52, 192, 96, 101, 243, 143, 92, 183, 201, 113, 160,
                    138, 166, 186, 91, 242, 220, 233, 125, 66, 4, 198, 167, 60, 41, 3, 189, 62,
                    218, 17, 140, 203, 174, 163, 189, 164, 110, 112, 101, 158, 221, 105, 158, 160,
                    224, 135, 59, 130, 241, 226, 190, 76, 250, 1, 50, 129, 152, 204, 234, 106, 98,
                    7, 104, 55, 179, 242, 216, 213, 199, 104, 123, 235, 205, 81, 142, 219, 160, 84,
                    248, 7, 24, 63, 29, 253, 8, 58, 20, 57, 116, 10, 69, 16, 199, 70, 222, 144,
                    103, 191, 137, 203, 153, 163, 149, 141, 76, 86, 254, 86, 86, 160, 254, 31, 108,
                    133, 255, 191, 76, 17, 42, 85, 154, 240, 81, 127, 36, 188, 250, 24, 151, 218,
                    48, 127, 113, 104, 139, 52, 242, 25, 189, 156, 82, 154, 128, 128, 128, 128,
                    128, 128, 128,
                ],
                vec![
                    249, 3, 39, 32, 185, 3, 35, 249, 3, 32, 1, 131, 34, 131, 255, 185, 1, 0, 0, 0,
                    0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0,
                    0, 0, 0, 0, 0, 0, 128, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    8, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
                    1, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                    0, 0, 0, 130, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 2, 21, 248,
                    155, 148, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251,
                    178, 36, 47, 150, 147, 248, 99, 160, 140, 91, 225, 229, 235, 236, 125, 91, 209,
                    79, 113, 66, 125, 30, 132, 243, 221, 3, 20, 192, 247, 178, 41, 30, 91, 32, 10,
                    200, 199, 195, 185, 37, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224,
                    250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51,
                    160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 104, 92, 0, 56, 132, 195, 148,
                    235, 181, 249, 35, 90, 29, 190, 156, 189, 198, 201, 214, 160, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 245, 223,
                    32, 248, 155, 148, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24,
                    199, 251, 178, 36, 47, 150, 147, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200,
                    155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161,
                    22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16,
                    193, 69, 6, 51, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58,
                    254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 160, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 161, 248, 217, 148, 188, 104, 92, 0, 56, 132, 195, 148, 235, 181, 249,
                    35, 90, 29, 190, 156, 189, 198, 201, 214, 225, 160, 75, 168, 15, 71, 73, 166,
                    186, 255, 95, 219, 86, 204, 248, 139, 224, 35, 161, 66, 98, 44, 226, 232, 89,
                    24, 130, 92, 112, 90, 69, 248, 126, 197, 184, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108,
                    106, 0, 126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
                    35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69,
                    6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 215, 92, 90, 20, 42, 104, 189,
                    164, 56, 230, 163, 24, 199, 251, 178, 36, 47, 150, 147, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
                ],
            ],
        }
    }

    #[test]
    fn test_event_data() {
        let nonce = 200;
        let relayer = "2a23e0fa3afe77aff5dc6c6a007e3a10c1450633".to_string();
        let token = "2a23e0fa3afe77aff5dc6c6a007e3a10c1450633".to_string();
        let recipient = "b2d75c5a142a68bda438e6a318c7fbb2242f9693".to_string();
        let amount = 161;
        let proof: Proof = create_proof();
        let param = TransferProof::parse(proof);

        assert_eq!(nonce, param.nonce);
        assert_eq!(utils::get_eth_address(relayer), param.relayer);
        assert_eq!(utils::get_eth_address(token), param.token);
        assert_eq!(utils::get_eth_address(recipient), param.recipient);
        assert_eq!(amount, param.amount);
    }
}
